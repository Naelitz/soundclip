#!/usr/bin/env python3

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

import argparse
import sys

import logging
logger = logging.getLogger('SoundClip')

from gi.repository import Gtk, Gst

from SoundClip import __version__
from SoundClip.gui import mainwindow
from SoundClip.project import Project
from SoundClip.util import get_gtk_version


def main():
    parser = argparse.ArgumentParser()

    parser.add_argument("-v", "--version", help="Display the version number and exit", action="store_true")
    parser.add_argument("-p", "--project", help="Specify the path to a project to open", type=str)
    parser.add_argument("-l", "--log", help="Specify the logging level to print", type=str, default="DEBUG")

    args = parser.parse_args()

    if args.version:
        print("SoundClip version " + __version__ + ". Using GTK+ " +
              get_gtk_version() + " and " + Gst.version_string())
        print("Copyright Nathan Lowe 2014. " +
              "SoundClip is licensed under the terms of the GNU General Public License version 3.")
        sys.exit(0)

    numeric_level = getattr(logging, args.log.upper(), None)
    if not isinstance(numeric_level, int):
        raise ValueError('Invalid log level: %s' % args.log)
    init_logging(numeric_level)

    Gtk.init(sys.argv)
    Gst.init(sys.argv)

    Gtk.Settings.get_default().set_property('gtk-application-prefer-dark-theme', True)

    p = None
    if args.project:
        logger.info("Trying to load project from {0}".format(args.project))
        try:
            p = Project.load(args.project)
        except Exception as ex:
            logger.warn("Unable to load project at {0}: {1}".format(args.project, ex))
            p = None
            d = Gtk.MessageDialog(None, 0, Gtk.MessageType.WARNING, Gtk.ButtonsType.OK, "Project Not Found")
            d.format_secondary_text("The project at {0} could not be found or is corrupt.".format(args.project))
            d.run()
            d.destroy()

    main_window = mainwindow.SCMainWindow(project=p)
    main_window.show_all()

    Gtk.main()


def init_logging(level):
    logger.setLevel(10)

    stream = logging.StreamHandler()
    stream.setLevel(level)

    formatter = logging.Formatter("[%(module)s | %(levelname)s]: %(message)s")
    stream.setFormatter(formatter)

    logger.addHandler(stream)

if __name__ == '__main__':
    main()